(defun main ()
  (let (f (open! "a.out"))
    (write-elf-header! f)))

; Print `n` (an integer between 0 and 9) inclusive as an ASCII character.
(defun print-digit! (f n)
  (write! f (+ n 48)))

; Write the string representation of integer `n` to stdout.
(defun print-int! (n)
  (if (> n 999)
      (error "TODO: print-int!: larger numbers")
    0)
  ; Deliberately crude implementation to minimise reliance on other
  ; functions or parts of compilation. This is a last-resort debugging
  ; tool.
  (let (hundreds (intdiv n 100)
        tens (intdiv (- n (* 100 hundreds)) 10)
        ones (- n (+ (* 100 hundreds) (* 10 tens))))
    (if (> n 99)
        (print-digit! 1 hundreds)
     0)
    (if (> n 9)
        (print-digit! 1 tens)
      0)
    (print-digit! 1 ones))
  (print "\n"))

(defun write-int32! (f n)
  (if (> n 255)
      (error "TODO: write-int32! with values bigger than one byte")
    0)
  (write! f n)
  (write! f 0)
  (write! f 0)
  (write! f 0))

(defun write-int64! (f n)
  (if (> n 255)
      (error "TODO: write-int64! with values bigger than one byte")
    0)
  (write! f n)
  (write! f 0)
  (write! f 0)
  (write! f 0)
  (write! f 0)
  (write! f 0)
  (write! f 0)
  (write! f 0))

(defun write-elf-header! (f)
  ; Write ELF magic number.
  (write! f 0x7F)
  (write! f 0x45)
  (write! f 0x4C)
  (write! f 0x46)
  (write! f 0x02)
  (write! f 0x01)
  (write! f 0x01)
  (write! f 0x00)
  ; ELF reserved.
  (write! f 0x00)
  (write! f 0x00)
  (write! f 0x00)
  (write! f 0x00)
  (write! f 0x00)
  (write! f 0x00)
  (write! f 0x00)
  (write! f 0x00)

  ; e_type: Executable file
  (write! f 0x02)
  (write! f 0x00)
  ; e_machine: AMD64
  (write! f 0x3E)
  (write! f 0x00)
  ; e_version: 1
  (write-int32! f 1))

; REFERENCES
;
; I find the following sites useful for documentation.
;
; syscalls: https://filippo.io/linux-syscall-table/
; instructions: https://www.felixcloutier.com/x86/

; DEBUGGING NOTES
;
; objdump can't show us the instructions of our executable section
; because we haven't set up section headers. gdb works fine though.
;
; $ gdb hello
; (gdb) set disassembly-flavor intel
; (gdb) starti
; (gdb) x/5i $pc
;
; Alternatively, to print the following instructions on every step:
;
; (gdb) display/5i $pc
;
; The gdb command 'layout reg' is helpful for seeing register
; values. You can also do 'layout asm' to see the assembly alongside.

